#+TITLE: Understanding Computation

#+PROPERTY: header-args :session
#+PROPERTY: header-args :results output

Note: I started this book before I used org mode, and so the first
three chapters of my notes and practical work are in markdown and ruby
code in subdirectories.

* Chapter 4

** Motivation
- Consider the task of accepting strings with perfectly balanced
  parentheses. This cannot be done by finite automata, which fails
  when having to accept inputs which are arbitrary levels deep.
- Finite Automata must have a /finite/ number of states, which means
  that they can't process inputs that need to keep track of an
  arbitrary amount of data.
- To solve this, we need to keep track of the current *nesting
  level* - how many brackets in we are.

** Pushdown
- An FSA with a stack attached to it is called a *pushdown automaton*
  (PDA).
- Deterministic PDAs are DPDAs.
- For ex, the matcher for balanced parantheses can push onto the stack
  every time it encounters a ( and pop from it every time it
  encounters a ).

*** Pushdown Rules
- The pushdown automaton must be capable of changing state based on
  the stack, or the input, or both. Therefore, its rules are a bit
  more complicated.
- Each rule includes:
  1. The initial state;
  2. The input (optional);
  3. The character to be popped from the stack (required!);
  4. The next state;
  5. The character(s) to be pushed onto the stack.

  Therefore, the PDA /always/ pops something from the stack and pushes
  something onto the stack. A rule that works when there's nothing on
  the stack pops =$=.
  Notation: =a;b/cd= -> read a, pop b, push cd.

** Determinism
- Principle: there should be no contradictions
- If a rule isn't specified for an =a;b= combination, it is assumed
  that the DPDA gets stuck, and therefore retains determinism.

*** Implementation

We need a stack:

#+begin_src ruby :session
  class Stack < Struct.new(:contents)
    def push(character)
      Stack.new([character] + contents)
    end

    def pop
      Stack.new(contents.drop(1))
    end

    # I don't like keeping stacks in this direction :'(
    def top
      contents.first
    end

    def inspect
      # The stack's inner state shouldn't be visible :)
      "#<Stack (#{top})[...]>"
    end
  end
#+end_src

#+RESULTS:
: (irb):249:in `<main>': [1msuperclass mismatch for class Stack ([1;4mTypeError[m[1m)[m
: 	from /Users/shrik450/.rvm/rubies/ruby-3.1.0/lib/ruby/gems/3.1.0/gems/irb-1.4.1/exe/irb:11:in `<top (required)>'
: 	from /Users/shrik450/.rvm/rubies/ruby-3.1.0/bin/irb:25:in `load'
: 	from /Users/shrik450/.rvm/rubies/ruby-3.1.0/bin/irb:25:in `<main>'

#+begin_src ruby :session
  # God bless p
  stack = p Stack.new(['a', 'b', 'c', 'd', 'e'])

  p stack.top

  p stack.pop.pop.top

  p stack.push('x').push('y').top

  p stack.push('x').push('y').pop.top
#+end_src

#+RESULTS:
: #<Stack (a)[...]>
: "a"
: "c"
: "y"
: "x"

A /configuration/ (not exactly the technical term) is the combination
of state and character at the top of the stack. Essentially, the
configuration is the state of a DPDA, but we can't say state because
state is already defined. Therefore, a PDA moves from configuration to
configuration.

#+begin_src ruby :session
  class PDAConfiguration < Struct.new(:state, :stack)
  end
#+end_src

#+RESULTS:

#+begin_src ruby :session
  class PDARule < Struct.new(
          :state,
          :character,
          :next_state,
          :pop_character,
          :push_characters
        )
    def applies_to?(configuration, character)
      self.state == configuration.state &&
        self.pop_character == configuration.stack.top &&
        self.character == character
    end
  end
#+end_src

#+RESULTS:

#+begin_src ruby :session
  rule = p PDARule.new(1, '(', 2, '$', ['b', '$'])

  configuration = p PDAConfiguration.new(1, Stack.new(['$']))

  p rule.applies_to?(configuration, '(')
#+end_src

#+RESULTS:
: #<struct PDARule state=1, character="(", next_state=2, pop_character="$", push_characters=["b", "$"]>
: #<struct PDAConfiguration state=1, stack=#<Stack ($)[...]>>
: true

#+begin_src ruby :session
  # This is why I switched to org :)

  class PDARule
    def follow(configuration)
      PDAConfiguration.new(next_state, next_stack(configuration))
    end

    def next_stack(configuration)
      popped_stack = configuration.stack.pop

      # You wouldn't have to do this if you picked sensible directions
      # for the stack and the representation of what's pushed :/
      push_characters.reverse.inject(popped_stack) {|stack, character|
        stack.push(character)
      }
    end
  end
#+end_src

#+RESULTS:

#+begin_src ruby :session
  # Wouldn't you believe it, these are still in session :D

  p rule.follow(configuration)
#+end_src

#+RESULTS:
: #<struct PDAConfiguration state=2, stack=#<Stack (b)[...]>>

#+begin_src ruby :session
  class DPDARulebook < Struct.new(:rules)
    def next_configuration(configuration, character)
      rule_for(configuration, character).follow(configuration)
    end

    def rule_for(configuration, character)
      # I was born a `find` man and I'll die a `find` man >:)
      rules.find {|rule|
        rule.applies_to?(configuration, character)
      }
    end
  end
#+end_src

#+RESULTS:

#+begin_src ruby :session
  rulebook =
    p DPDARulebook.new(
        [
          PDARule.new(1, '(', 2, '$', ['b', '$']),
          PDARule.new(2, '(', 2, 'b', ['b', 'b']),
          PDARule.new(2, ')', 2, 'b', []),
          PDARule.new(2, nil, 1, '$', ['$']),
        ]
      )

  configuration = p rulebook.next_configuration(configuration, '(')

  configuration = p rulebook.next_configuration(configuration, '(')

  configuration = p rulebook.next_configuration(configuration, ')')
#+end_src

#+RESULTS:
: #<struct DPDARulebook rules=[#<struct PDARule state=1, character="(", next_state=2, pop_character="$", push_characters=["b", "$"]>, #<struct PDARule state=2, character="(", next_state=2, pop_character="b", push_characters=["b", "b"]>, #<struct PDARule state=2, character=")", next_state=2, pop_character="b", push_characters=[]>, #<struct PDARule state=2, character=nil, next_state=1, pop_character="$", push_characters=["$"]>]>
: #<struct PDAConfiguration state=2, stack=#<Stack (b)[...]>>
: #<struct PDAConfiguration state=2, stack=#<Stack (b)[...]>>
: #<struct PDAConfiguration state=2, stack=#<Stack (b)[...]>>

#+begin_src ruby :session
  class DPDA < Struct.new(:current_configuration, :accept_states, :rulebook)
    def accepting?
      accept_states.member? current_configuration.state
    end

    def read_character(character)
      self.current_configuration =
        rulebook.next_configuration(current_configuration, character)
    end

    def read_string(string)
      string.chars.each do |char|
        read_character char
      end
    end
  end

#+end_src

#+RESULTS:

#+begin_src ruby :session
  dpda = p DPDA.new(PDAConfiguration.new(1, Stack.new(['$'])), [1], rulebook)

  p dpda.accepting?

  dpda.read_string('(()')
  p dpda.accepting?

  p dpda.current_configuration
#+end_src

#+RESULTS:
: #<struct DPDA current_configuration=#<struct PDAConfiguration state=1, stack=#<Stack ($)[...]>>, accept_states=[1], rulebook=#<struct DPDARulebook rules=[#<struct PDARule state=1, character="(", next_state=2, pop_character="$", push_characters=["b", "$"]>, #<struct PDARule state=2, character="(", next_state=2, pop_character="b", push_characters=["b", "b"]>, #<struct PDARule state=2, character=")", next_state=2, pop_character="b", push_characters=[]>, #<struct PDARule state=2, character=nil, next_state=1, pop_character="$", push_characters=["$"]>]>>
: true
: false
: #<struct PDAConfiguration state=2, stack=#<Stack (b)[...]>>

#+begin_src ruby :session
  class DPDARulebook
    def applies_to?(configuration, character)
      !rule_for(configuration, character).nil?
    end

    def follow_free_moves(configuration)
      if applies_to? configuration, nil
        follow_free_moves(next_configuration(configuration, nil))
      else
        configuration
      end
    end
  end
#+end_src

#+RESULTS:

This opens up the possibility of infinite loops, which doesn't seem
very deterministic to me. Maybe the criteria for calling a PDA
deterministic should include a rule about that?

#+begin_src ruby :session
  class DPDA
    def current_configuration
      rulebook.follow_free_moves(super)
    end
  end
#+end_src

#+RESULTS:

#+begin_src ruby :session
  dpda = p DPDA.new(PDAConfiguration.new(1, Stack.new(['$'])), [1], rulebook)

  dpda.read_string('(()(')
  p dpda.accepting?

  p dpda.current_configuration

  dpda.read_string('))()')

  p dpda.accepting?

  p dpda.current_configuration
#+end_src

#+RESULTS:
: #<struct DPDA current_configuration=#<struct PDAConfiguration state=1, stack=#<Stack ($)[...]>>, accept_states=[1], rulebook=#<struct DPDARulebook rules=[#<struct PDARule state=1, character="(", next_state=2, pop_character="$", push_characters=["b", "$"]>, #<struct PDARule state=2, character="(", next_state=2, pop_character="b", push_characters=["b", "b"]>, #<struct PDARule state=2, character=")", next_state=2, pop_character="b", push_characters=[]>, #<struct PDARule state=2, character=nil, next_state=1, pop_character="$", push_characters=["$"]>]>>
: false
: #<struct PDAConfiguration state=2, stack=#<Stack (b)[...]>>
: true
: #<struct PDAConfiguration state=1, stack=#<Stack ($)[...]>>

#+begin_src ruby :session
  class DPDADesign < Struct.new(
          :start_state,
          :bottom_character,
          :accept_states,
          :rulebook
        )
    def accepts?(string)
      to_dpda.tap {|dpda| dpda.read_string(string) }.accepting?
    end

    def to_dpda
      start_stack = Stack.new([bottom_character])
      start_configuration = PDAConfiguration.new(start_state, start_stack)
      DPDA.new(start_configuration, accept_states, rulebook)
    end
  end
#+end_src

#+RESULTS:

#+begin_src ruby :session
  dpda_design = p DPDADesign.new(1, '$', [1], rulebook)

  p dpda_design.accepts?('(((((((((())))))))))')

  p dpda_design.accepts?('()(())((()))(()(()))')

  p dpda_design.accepts?('(()(()(()()(()()))()')
#+end_src

#+RESULTS:
: #<struct DPDADesign start_state=1, bottom_character="$", accept_states=[1], rulebook=#<struct DPDARulebook rules=[#<struct PDARule state=1, character="(", next_state=2, pop_character="$", push_characters=["b", "$"]>, #<struct PDARule state=2, character="(", next_state=2, pop_character="b", push_characters=["b", "b"]>, #<struct PDARule state=2, character=")", next_state=2, pop_character="b", push_characters=[]>, #<struct PDARule state=2, character=nil, next_state=1, pop_character="$", push_characters=["$"]>]>>
: true
: true
: false

#+begin_src ruby :session
  class PDAConfiguration
    # Completely unique!
    STUCK_STATE = Object.new.freeze

    def stuck
      PDAConfiguration.new(STUCK_STATE, stack)
    end

    def stuck?
      state == STUCK_STATE
    end
  end

  class DPDA
    def next_configuration(character)
      if rulebook.applies_to?(current_configuration, character)
        rulebook.next_configuration(current_configuration, character)
      else
        current_configuration.stuck
      end
    end

    def stuck?
      current_configuration.stuck?
    end

    def read_character(character)
      self.current_configuration = next_configuration(character)
    end

    def read_string(string)
      string.chars.each do |char|
        read_character(char) unless stuck?
      end
    end
  end
#+end_src

#+RESULTS:
: (irb):453: warning: already initialized constant PDAConfiguration::STUCK_STATE
: (irb):399: warning: previous definition of STUCK_STATE was here

#+begin_src ruby :session
  dpda = p DPDA.new(PDAConfiguration.new(1, Stack.new(['$'])), [1], rulebook)

  dpda.read_string('())')
  p dpda.current_configuration

  p dpda.accepting?

  p dpda.stuck?

  p dpda_design.accepts?('())')

#+end_src

#+RESULTS:
: #<struct DPDA current_configuration=#<struct PDAConfiguration state=1, stack=#<Stack ($)[...]>>, accept_states=[1], rulebook=#<struct DPDARulebook rules=[#<struct PDARule state=1, character="(", next_state=2, pop_character="$", push_characters=["b", "$"]>, #<struct PDARule state=2, character="(", next_state=2, pop_character="b", push_characters=["b", "b"]>, #<struct PDARule state=2, character=")", next_state=2, pop_character="b", push_characters=[]>, #<struct PDARule state=2, character=nil, next_state=1, pop_character="$", push_characters=["$"]>]>>
: #<struct PDAConfiguration state=#<Object:0x000000010498c358>, stack=#<Stack ($)[...]>>
: false
: true
: false

** Non Deterministic
- The DPDA we've made so far is kinda lame, it doesn't really do all
  that much with the stack.
- More interesting uses of the stack: accept only palindromes!
- However, we can't just match palindromes that easily, we need a
  marker to identify the middle of the palindrome.
  - Why? Because if we don't, how will the PDA know when to start
    popping from the stack?
- So we need a /truly/ free move, and a similar system to the
  non deterministic FA: any possible state works.

*** Implementation

#+begin_src ruby :session
  require 'set'

  class NPDARulebook < Struct.new(:rules)
    def next_configurations(configurations, character)
      configurations.flat_map {|config|
        follow_rules_for config, character
      }.to_set
    end

    def follow_rules_for(configuration, character)
      rules_for(configuration, character)
        .map {|rule|
          rule.follow configuration
        }
    end

    def rules_for(configuration, character)
      # I was born a filter man and I will die a filter man :)
      rules.filter {|rule|
        rule.applies_to? configuration, character
      }
    end
  end
#+end_src

#+RESULTS:
: (irb):572:in `<main>': [1msuperclass mismatch for class NPDARulebook ([1;4mTypeError[m[1m)[m
: 	from /Users/shrik450/.rvm/rubies/ruby-3.1.0/lib/ruby/gems/3.1.0/gems/irb-1.4.1/exe/irb:11:in `<top (required)>'
: 	from /Users/shrik450/.rvm/rubies/ruby-3.1.0/bin/irb:25:in `load'
: 	from /Users/shrik450/.rvm/rubies/ruby-3.1.0/bin/irb:25:in `<main>'

#+begin_src ruby :session
  class NPDARulebook
    def follow_free_moves(configurations)
      # lol
      more_configurations = next_configurations(configurations, nil)

      if more_configurations.subset? configurations
        configurations
      else
        follow_free_moves(configurations + more_configurations)
      end
    end
  end
#+end_src

#+RESULTS:

#+begin_src ruby :session
  class NPDA < Struct.new(
          :current_configurations,
          :accept_states,
          :rulebook
        )
    def accepting?
      current_configurations.any? {|config|
        accept_states.include? config.state
      }
    end

    def read_character(character)
      self.current_configurations =
        rulebook.next_configurations(current_configurations, character)
    end

    def read_string(string)
      string.chars.each do |char|
        read_character char
      end
    end

    def current_configurations
      rulebook.follow_free_moves(super)
    end
  end
#+end_src

#+RESULTS:

#+begin_src ruby :session
  rulebook = NPDARulebook.new(
    [
      PDARule.new(1, 'a', 1, '$', ['a', '$']),
      PDARule.new(1, 'a', 1, 'a', ['a', 'a']),
      PDARule.new(1, 'a', 1, 'b', ['a', 'b']),
      PDARule.new(1, 'b', 1, '$', ['b', '$']),
      PDARule.new(1, 'b', 1, 'a', ['b', 'a']),
      PDARule.new(1, 'b', 1, 'b', ['b', 'b']),
      PDARule.new(1, nil, 2, '$', ['$']),
      PDARule.new(1, nil, 2, 'a', ['a']),
      PDARule.new(1, nil, 2, 'b', ['b']),
      PDARule.new(2, 'a', 2, 'a', []),
      PDARule.new(2, 'b', 2, 'b', []),
      PDARule.new(2, nil, 3, '$', ['$'])
    ]
  )


  configuration = PDAConfiguration.new(1, Stack.new(['$']))
  npda = NPDA.new(Set[configuration], [3], rulebook)

  p npda.accepting?

  p npda.current_configurations

  npda.read_string('abb')

  p npda.accepting?

  p npda.current_configurations

  npda.read_character('a')

  p npda.accepting?

  p npda.current_configurations
#+end_src

#+RESULTS:
: true
: #<Set: {#<struct PDAConfiguration state=1, stack=#<Stack ($)[...]>>, #<struct PDAConfiguration state=2, stack=#<Stack ($)[...]>>, #<struct PDAConfiguration state=3, stack=#<Stack ($)[...]>>}>
: false
: #<Set: {#<struct PDAConfiguration state=1, stack=#<Stack (b)[...]>>, #<struct PDAConfiguration state=2, stack=#<Stack (a)[...]>>, #<struct PDAConfiguration state=2, stack=#<Stack (b)[...]>>}>
: true
: #<Set: {#<struct PDAConfiguration state=1, stack=#<Stack (a)[...]>>, #<struct PDAConfiguration state=2, stack=#<Stack ($)[...]>>, #<struct PDAConfiguration state=2, stack=#<Stack (a)[...]>>, #<struct PDAConfiguration state=3, stack=#<Stack ($)[...]>>}>

#+begin_src ruby :session
  class NPDADesign < Struct.new(
          :start_state,
          :bottom_character,
          :accept_states,
          :rulebook
        )
    def accepts?(string)
      to_npda.tap {|npda|
        npda.read_string(string).accepting?
      }
    end

    def to_npda
      start_stack = Stack.new([bottom_character])
      start_configuration = PDAConfiguration.new(start_state, start_stack)
      NPDA.new(Set[start_configuration], accept_states, rulebook)
    end
  end
#+end_src

#+begin_src ruby :session
  class NPDADesign
    # I messed this up so I have to rewrite in a new code block
    # ;_;
    def accepts?(string)
      to_npda.tap { |npda| npda.read_string(string) }.accepting?
    end
  end
#+end_src

#+RESULTS:

-

#+begin_src ruby :session
  npda_design = p NPDADesign.new(1, '$', [3], rulebook)

  p npda_design.accepts?('abba')

  p npda_design.accepts?('babbaabbab')

  p npda_design.accepts?('abb')

  p npda_design.accepts?('baabaa')
#+end_src

#+RESULTS:
: #<struct NPDADesign start_state=1, bottom_character="$", accept_states=[3], rulebook=#<struct NPDARulebook rules=[#<struct PDARule state=1, character="a", next_state=1, pop_character="$", push_characters=["a", "$"]>, #<struct PDARule state=1, character="a", next_state=1, pop_character="a", push_characters=["a", "a"]>, #<struct PDARule state=1, character="a", next_state=1, pop_character="b", push_characters=["a", "b"]>, #<struct PDARule state=1, character="b", next_state=1, pop_character="$", push_characters=["b", "$"]>, #<struct PDARule state=1, character="b", next_state=1, pop_character="a", push_characters=["b", "a"]>, #<struct PDARule state=1, character="b", next_state=1, pop_character="b", push_characters=["b", "b"]>, #<struct PDARule state=1, character=nil, next_state=2, pop_character="$", push_characters=["$"]>, #<struct PDARule state=1, character=nil, next_state=2, pop_character="a", push_characters=["a"]>, #<struct PDARule state=1, character=nil, next_state=2, pop_character="b", push_characters=["b"]>, #<struct PDARule state=2, character="a", next_state=2, pop_character="a", push_characters=[]>, #<struct PDARule state=2, character="b", next_state=2, pop_character="b", push_characters=[]>, #<struct PDARule state=2, character=nil, next_state=3, pop_character="$", push_characters=["$"]>]>>
: true
: true
: false
: false

*** Equivalence
Unfortunately, NPDAs aren't equivalent to DPDAs as NFAs are to
DFAs. This is because of the stack: while an NFA can be represented as
a DFA with possible states being sets of all possible NFA states, a
DPDA representation of an NPDA will have to simulate all possible
stacks parallely. That's not possible.
