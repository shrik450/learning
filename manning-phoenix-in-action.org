#+TITLE: Phoenix in Action

* Chapter 1

- The big advantage of erlang processes over plain objects is that
  BEAM contains a baked-in abstraction for talking to process across
  nodes?
- I already know this stuff about FP, was a good skim

* Chapter 2

- FizzBuzz

#+begin_src elixir
  defmodule FizzBuzz do
    def go(min, max) do
      Enum.each(min..max, &go/1)
    end

    def go(num) when rem(num, 15) == 0, do: IO.puts "fizzbuzz"
    def go(num) when rem(num, 3) == 0, do: IO.puts "fizz"
    def go(num) when rem(num, 5) == 0, do: IO.puts "buzz"
    def go(num), do: IO.puts num
  end

  FizzBuzz.go(1, 100)
#+end_src

#+RESULTS:
#+begin_example
[33mwarning: [0mredefining module FizzBuzz (current version defined in memory)
  iex:1

1
2
fizz
4
buzz
fizz
7
8
fizz
buzz
11
fizz
13
14
fizzbuzz
16
17
fizz
19
buzz
fizz
22
23
fizz
buzz
26
fizz
28
29
fizzbuzz
31
32
fizz
34
buzz
fizz
37
38
fizz
buzz
41
fizz
43
44
fizzbuzz
46
47
fizz
49
buzz
fizz
52
53
fizz
buzz
56
fizz
58
59
fizzbuzz
61
62
fizz
64
buzz
fizz
67
68
fizz
buzz
71
fizz
73
74
fizzbuzz
76
77
fizz
79
buzz
fizz
82
83
fizz
buzz
86
fizz
88
89
fizzbuzz
91
92
fizz
94
buzz
fizz
97
98
fizz
buzz
:ok
#+end_example
2
fizz
4
buzz
fizz
7
8
fizz
buzz
11
fizz
13
14
fizzbuzz
16
17
fizz
19
buzz
fizz
22
23
fizz
buzz
26
fizz
28
29
fizzbuzz
31
32
fizz
34
buzz
fizz
37
38
fizz
buzz
41
fizz
43
44
fizzbuzz
46
47
fizz
49
buzz
fizz
52
53
fizz
buzz
56
fizz
58
59
fizzbuzz
61
62
fizz
64
buzz
fizz
67
68
fizz
buzz
71
fizz
73
74
fizzbuzz
76
77
fizz
79
buzz
fizz
82
83
fizz
buzz
86
fizz
88
89
fizzbuzz
91
92
fizz
94
buzz
fizz
97
98
fizz
buzz
:ok
#+end_e

- FizzBuzz, but with cond

#+begin_src elixir
  defmodule FizzBuzz do
    def go(min, max), do: Enum.each(min..max, &go/1)
    def go(num) do
      cond do
        rem(num, 15) == 0 -> IO.puts "FizzBuzz"
        rem(num, 3) == 0 -> IO.puts "Fizz"
        rem(num, 5) == 0 -> IO.puts "Buzz"
        true -> IO.puts num
      end
    end
  end

  FizzBuzz.go(1, 100)
#+end_src

#+RESULTS:
#+begin_example
[33mwarning: [0mredefining module FizzBuzz (current version defined in memory)
  iex:1

1
2
Fizz
4
Buzz
Fizz
7
8
Fizz
Buzz
11
Fizz
13
14
FizzBuzz
16
17
Fizz
19
Buzz
Fizz
22
23
Fizz
Buzz
26
Fizz
28
29
FizzBuzz
31
32
Fizz
34
Buzz
Fizz
37
38
Fizz
Buzz
41
Fizz
43
44
FizzBuzz
46
47
Fizz
49
Buzz
Fizz
52
53
Fizz
Buzz
56
Fizz
58
59
FizzBuzz
61
62
Fizz
64
Buzz
Fizz
67
68
Fizz
Buzz
71
Fizz
73
74
FizzBuzz
76
77
Fizz
79
Buzz
Fizz
82
83
Fizz
Buzz
86
Fizz
88
89
FizzBuzz
91
92
Fizz
94
Buzz
Fizz
97
98
Fizz
Buzz
:ok
#+end_example

- FizzBuzz case style

#+begin_src elixir
  defmodule FizzBuzz do
    def go(min, max), do: Enum.each(min..max, &go/1)
    def go(num) do
      case {rem(num, 3), rem(num, 5)} do
        {0, 0} -> IO.puts "FizzBuzz"
        {0, _} -> IO.puts "Fizz"
        {_, 0} -> IO.puts "Buzz"
        _ -> IO.puts num
      end
    end
  end

  FizzBuzz.go(1, 100)
#+end_src

#+RESULTS:
#+begin_example
[33mwarning: [0mredefining module FizzBuzz (current version defined in memory)
  iex:1

1
2
Fizz
4
Buzz
Fizz
7
8
Fizz
Buzz
11
Fizz
13
14
FizzBuzz
16
17
Fizz
19
Buzz
Fizz
22
23
Fizz
Buzz
26
Fizz
28
29
FizzBuzz
31
32
Fizz
34
Buzz
Fizz
37
38
Fizz
Buzz
41
Fizz
43
44
FizzBuzz
46
47
Fizz
49
Buzz
Fizz
52
53
Fizz
Buzz
56
Fizz
58
59
FizzBuzz
61
62
Fizz
64
Buzz
Fizz
67
68
Fizz
Buzz
71
Fizz
73
74
FizzBuzz
76
77
Fizz
79
Buzz
Fizz
82
83
Fizz
Buzz
86
Fizz
88
89
FizzBuzz
91
92
Fizz
94
Buzz
Fizz
97
98
Fizz
Buzz
:ok
#+end_example

- Charlists: =[71, 101, 111]= is represented as ='Geo'=, hmm.

- You really can learn enough about elixir by just diving into
  phoenix. A lot of the syntax and patterns are clear from just usage,
  especially because phoenix is very explicit.

* Chapter 3
Most of this stuff isn't very different from how Rack/Rails works, and
I have enough experience with that (and more low level YSAF w/ Giraffe
and http4k) to grok it.

* Chapter 4

- Phoenix is not your application: This reminds me a lot of the
  advantages of the Java way of layering, with every interaction being
  through well defined interfaces: you can always replace each
  individual element of your app if you have a reason to.

#+begin_src elixir
  defmodule Auction.Item do
    defstruct ~w(id title description ends_at)a
  end
#+end_src

#+RESULTS:
: {:module, Auction.Item,
:  <<70, 79, 82, 49, 0, 0, 7, 28, 66, 69, 65, 77, 65, 116, 85, 56, 0, 0, 0, 201,
:    0, 0, 0, 19, 19, 69, 108, 105, 120, 105, 114, 46, 65, 117, 99, 116, 105, 111,
:    110, 46, 73, 116, 101, 109, 8, 95, 95, ...>>,
:  %Auction.Item{description: nil, ends_at: nil, id: nil, title: nil}}

#+begin_src elixir
  alias Auction.Item

  book = %Item{
    id: 1,
    title: "Phoenix in Action",
    description: "Learn Phoenix with...",
    ends_at: ~N[2021-11-19 09:56:28]
  }
#+end_src

#+RESULTS:
: %Auction.Item{
:   description: "Learn Phoenix with...",
:   ends_at: ~N[2021-11-19 09:56:28],
:   id: 1,
:   title: "Phoenix in Action"
: }

- In memory database: I remember building exactly this for Flipkart's
  MC round, excpet that was in ruby :P

#+begin_src elixir
  defmodule Auction do
    alias Auction.{FakeRepo, Item}

    @repo FakeRepo

    def list_items do
      @repo.all(Item)
    end

    def get_item(id) do
      @repo.get!(Item, id)
    end

    def get_item_by(attrs) do
      @repo.get_by(Item, attrs)
    end
  end
#+end_src

#+RESULTS:
: {:module, Auction,
:  <<70, 79, 82, 49, 0, 0, 6, 224, 66, 69, 65, 77, 65, 116, 85, 56, 0, 0, 0, 225,
:    0, 0, 0, 21, 14, 69, 108, 105, 120, 105, 114, 46, 65, 117, 99, 116, 105, 111,
:    110, 8, 95, 95, 105, 110, 102, 111, 95, ...>>, {:get_item_by, 1}}

This is fairly complex, hmm.

#+begin_src elixir
  defmodule Auction.FakeRepo do
    alias Auction.Item

    # Copied and pasted as-is from the book.
    @items [
      %Item{
        id: 1,
        title: "My first item",
        description: "A tasty item sure to please",
        ends_at: ~N[2020-01-01 00:00:00]
      },
      %Item{
        id: 2,
        title: "WarGames Bluray",
        description: "The best computer movie of all time, now on Bluray!",
        ends_at: ~N[2018-10-15 13:39:35]
      },
      %Item{
        id: 3,
        title: "U2 - Achtung Baby on CD",
        description: "The sound of 4 men chopping down The Joshua Tree",
        ends_at: ~N[2018-11-05 03:12:29]
      }
    ]

    def all(Item), do: @items

    def get!(Item, id) do
      Enum.find(@items, fn (item) -> item.id == id end)
    end

    def get_by(Item, attrs) do
      Enum.find(@items, fn (item) ->
        Enum.all?(Map.keys(attrs), fn (key) ->
          Map.get(item, key) === attrs[key]
        end)
      end)
    end
  end
#+end_src

#+RESULTS:
: [33mwarning: [0mredefining module Auction.FakeRepo (current version defined in memory)
:   iex:1
:
: {:module, Auction.FakeRepo,
:  <<70, 79, 82, 49, 0, 0, 12, 84, 66, 69, 65, 77, 65, 116, 85, 56, 0, 0, 1, 55,
:    0, 0, 0, 33, 23, 69, 108, 105, 120, 105, 114, 46, 65, 117, 99, 116, 105, 111,
:    110, 46, 70, 97, 107, 101, 82, 101, 112, ...>>, {:get_by, 2}}

#+begin_src elixir
Auction.list_items
#+end_src

#+RESULTS:
#+begin_example
[
  %Auction.Item{
    description: "A tasty item sure to please",
    ends_at: ~N[2020-01-01 00:00:00],
    id: 1,
    title: "My first item"
  },
  %Auction.Item{
    description: "The best computer movie of all time, now on Bluray!",
    ends_at: ~N[2018-10-15 13:39:35],
    id: 2,
    title: "WarGames Bluray"
  },
  %Auction.Item{
    description: "The sound of 4 men chopping down The Joshua Tree",
    ends_at: ~N[2018-11-05 03:12:29],
    id: 3,
    title: "U2 - Achtung Baby on CD"
  }
]
#+end_example

#+begin_src elixir
Auction.get_item(2)
#+end_src

#+RESULTS:
: %Auction.Item{
:   description: "The best computer movie of all time, now on Bluray!",
:   ends_at: ~N[2018-10-15 13:39:35],
:   id: 2,
:   title: "WarGames Bluray"
: }

#+begin_src elixir
Auction.get_item(20)
#+end_src

#+RESULTS:
: nil

#+begin_src elixir
Auction.get_item_by(%{title: "WarGames Bluray"})
#+end_src

#+RESULTS:
: %Auction.Item{
:   description: "The best computer movie of all time, now on Bluray!",
:   ends_at: ~N[2018-10-15 13:39:35],
:   id: 2,
:   title: "WarGames Bluray"
: }
